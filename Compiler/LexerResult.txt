In line:1    symint: int
In line:1    IDENT: a
In line:1    Lspar: [
In line:1    NUM: 100
In line:1    Rspar: ]
In line:1    SEMICOLON: ;
In line:2    symint: int
In line:2    IDENT: gcd
In line:2    Lpar: (
In line:2    symint: int
In line:2    IDENT: m
In line:2    COMMA: ,
In line:2    symint: int
In line:2    IDENT: n
In line:2    Rpar: )
In line:3    Lbrac: {
In line:4    symif: if
In line:4    Lpar: (
In line:4    IDENT: m
In line:4    EQ: ==
In line:4    NUM: 0
In line:4    Rpar: )
In line:5    symreturn: return
In line:5    Lpar: (
In line:5    IDENT: n
In line:5    Rpar: )
In line:5    SEMICOLON: ;
In line:6    symif: if
In line:6    Lpar: (
In line:6    IDENT: n
In line:6    EQ: ==
In line:6    NUM: 0
In line:6    Rpar: )
In line:7    symreturn: return
In line:7    Lpar: (
In line:7    IDENT: m
In line:7    Rpar: )
In line:7    SEMICOLON: ;
In line:8    symif: if
In line:8    Lpar: (
In line:8    IDENT: m
In line:8    GEQ: >=
In line:8    IDENT: n
In line:8    Rpar: )
In line:9    symreturn: return
In line:9    Lpar: (
In line:9    IDENT: gcd
In line:9    Lpar: (
In line:9    IDENT: m
In line:9    MINUS: -
In line:9    IDENT: n
In line:9    COMMA: ,
In line:9    IDENT: n
In line:9    Rpar: )
In line:9    Rpar: )
In line:9    SEMICOLON: ;
In line:10    symelse: else
In line:11    symreturn: return
In line:11    Lpar: (
In line:11    IDENT: gcd
In line:11    Lpar: (
In line:11    IDENT: m
In line:11    COMMA: ,
In line:11    IDENT: n
In line:11    MINUS: -
In line:11    IDENT: m
In line:11    Rpar: )
In line:11    Rpar: )
In line:11    SEMICOLON: ;
In line:12    Rbrac: }
In line:13    symint: int
In line:13    IDENT: compare
In line:13    Lpar: (
In line:13    symint: int
In line:13    IDENT: a
In line:13    COMMA: ,
In line:13    symint: int
In line:13    IDENT: b
In line:13    Rpar: )
In line:13    Lbrac: {
In line:14    symif: if
In line:14    Lpar: (
In line:14    IDENT: a
In line:14    GRT: >
In line:14    IDENT: b
In line:14    Rpar: )
In line:14    symreturn: return
In line:14    Lpar: (
In line:14    NUM: 1
In line:14    Rpar: )
In line:14    SEMICOLON: ;
In line:15    symif: if
In line:15    Lpar: (
In line:15    IDENT: a
In line:15    LEQ: <=
In line:15    IDENT: b
In line:15    Rpar: )
In line:15    symreturn: return
In line:15    Lpar: (
In line:15    MINUS: -
In line:15    NUM: 1
In line:15    Rpar: )
In line:15    SEMICOLON: ;
In line:16    Rbrac: }
In line:17    symvoid: void
In line:17    IDENT: bubblesort
In line:17    Lpar: (
In line:17    symint: int
In line:17    IDENT: n
In line:17    Rpar: )
In line:18    Lbrac: {
In line:19    symint: int
In line:19    IDENT: k
In line:19    COMMA: ,
In line:19    IDENT: i
In line:19    COMMA: ,
In line:19    IDENT: tmp
In line:19    SEMICOLON: ;
In line:20    symfor: for
In line:20    Lpar: (
In line:20    IDENT: i
In line:20    GIVEN: =
In line:20    IDENT: n
In line:20    MINUS: -
In line:20    NUM: 1
In line:20    SEMICOLON: ;
In line:20    IDENT: i
In line:20    GEQ: >=
In line:20    NUM: 1
In line:20    SEMICOLON: ;
In line:20    IDENT: i
In line:20    GIVEN: =
In line:20    IDENT: i
In line:20    MINUS: -
In line:20    NUM: 1
In line:20    Rpar: )
In line:21    Lbrac: {
In line:22    symfor: for
In line:22    Lpar: (
In line:22    IDENT: k
In line:22    GIVEN: =
In line:22    NUM: 0
In line:22    SEMICOLON: ;
In line:22    IDENT: k
In line:22    LEQ: <=
In line:22    IDENT: i
In line:22    MINUS: -
In line:22    NUM: 1
In line:22    SEMICOLON: ;
In line:22    IDENT: k
In line:22    GIVEN: =
In line:22    IDENT: k
In line:22    PLUS: +
In line:22    NUM: 1
In line:22    Rpar: )
In line:23    Lbrac: {
In line:24    symif: if
In line:24    Lpar: (
In line:24    IDENT: a
In line:24    Lspar: [
In line:24    IDENT: k
In line:24    Rspar: ]
In line:24    GRT: >
In line:24    IDENT: a
In line:24    Lspar: [
In line:24    IDENT: k
In line:24    PLUS: +
In line:24    NUM: 1
In line:24    Rspar: ]
In line:24    Rpar: )
In line:25    Lbrac: {
In line:26    IDENT: tmp
In line:26    GIVEN: =
In line:26    IDENT: a
In line:26    Lspar: [
In line:26    IDENT: k
In line:26    Rspar: ]
In line:26    SEMICOLON: ;
In line:27    IDENT: a
In line:27    Lspar: [
In line:27    IDENT: k
In line:27    Rspar: ]
In line:27    GIVEN: =
In line:27    IDENT: a
In line:27    Lspar: [
In line:27    IDENT: k
In line:27    PLUS: +
In line:27    NUM: 1
In line:27    Rspar: ]
In line:27    SEMICOLON: ;
In line:28    IDENT: a
In line:28    Lspar: [
In line:28    IDENT: k
In line:28    PLUS: +
In line:28    NUM: 1
In line:28    Rspar: ]
In line:28    GIVEN: =
In line:28    IDENT: tmp
In line:28    SEMICOLON: ;
In line:29    Rbrac: }
In line:30    Rbrac: }
In line:31    Rbrac: }
In line:32    Rbrac: }
In line:33    symint: int
In line:33    IDENT: fib
In line:33    Lpar: (
In line:33    symint: int
In line:33    IDENT: n
In line:33    Rpar: )
In line:33    Lbrac: {
In line:34    symif: if
In line:34    Lpar: (
In line:34    IDENT: n
In line:34    EQ: ==
In line:34    NUM: 0
In line:34    Rpar: )
In line:34    symreturn: return
In line:34    Lpar: (
In line:34    NUM: 0
In line:34    Rpar: )
In line:34    SEMICOLON: ;
In line:35    symif: if
In line:35    Lpar: (
In line:35    IDENT: n
In line:35    EQ: ==
In line:35    NUM: 1
In line:35    Rpar: )
In line:35    symreturn: return
In line:35    Lpar: (
In line:35    NUM: 1
In line:35    Rpar: )
In line:35    SEMICOLON: ;
In line:36    symreturn: return
In line:36    Lpar: (
In line:36    IDENT: fib
In line:36    Lpar: (
In line:36    IDENT: n
In line:36    MINUS: -
In line:36    NUM: 1
In line:36    Rpar: )
In line:36    PLUS: +
In line:36    IDENT: fib
In line:36    Lpar: (
In line:36    IDENT: n
In line:36    MINUS: -
In line:36    NUM: 2
In line:36    Rpar: )
In line:36    Rpar: )
In line:36    SEMICOLON: ;
In line:37    Rbrac: }
In line:38    symvoid: void
In line:38    IDENT: complexfor
In line:38    Lpar: (
In line:38    Rpar: )
In line:38    Lbrac: {
In line:39    symint: int
In line:39    IDENT: i
In line:39    COMMA: ,
In line:39    IDENT: j
In line:39    COMMA: ,
In line:39    IDENT: k
In line:39    COMMA: ,
In line:39    IDENT: ss
In line:39    Lspar: [
In line:39    NUM: 9
In line:39    Rspar: ]
In line:39    COMMA: ,
In line:39    IDENT: pp
In line:39    Lspar: [
In line:39    NUM: 9
In line:39    Rspar: ]
In line:39    SEMICOLON: ;
In line:40    symint: int
In line:40    IDENT: p
In line:40    COMMA: ,
In line:40    IDENT: q
In line:40    COMMA: ,
In line:40    IDENT: move
In line:40    COMMA: ,
In line:40    IDENT: end
In line:40    COMMA: ,
In line:40    IDENT: po1
In line:40    COMMA: ,
In line:40    IDENT: po2
In line:40    COMMA: ,
In line:40    IDENT: st2
In line:40    SEMICOLON: ;
In line:41    IDENT: i
In line:41    GIVEN: =
In line:41    NUM: 1
In line:41    SEMICOLON: ;
In line:41    IDENT: j
In line:41    GIVEN: =
In line:41    NUM: 1
In line:41    SEMICOLON: ;
In line:42    symfor: for
In line:42    Lpar: (
In line:42    IDENT: i
In line:42    GIVEN: =
In line:42    NUM: 1
In line:42    SEMICOLON: ;
In line:42    IDENT: i
In line:42    LEQ: <=
In line:42    NUM: 8
In line:42    SEMICOLON: ;
In line:42    IDENT: i
In line:42    GIVEN: =
In line:42    IDENT: i
In line:42    PLUS: +
In line:42    NUM: 1
In line:42    Rpar: )
In line:43    Lbrac: {
In line:44    IDENT: ss
In line:44    Lspar: [
In line:44    IDENT: i
In line:44    Rspar: ]
In line:44    GIVEN: =
In line:44    IDENT: i
In line:44    SEMICOLON: ;
In line:45    IDENT: pp
In line:45    Lspar: [
In line:45    IDENT: i
In line:45    Rspar: ]
In line:45    GIVEN: =
In line:45    IDENT: i
In line:45    SEMICOLON: ;
In line:46    Rbrac: }
In line:47    symfor: for
In line:47    Lpar: (
In line:47    IDENT: i
In line:47    GIVEN: =
In line:47    NUM: 1
In line:47    SEMICOLON: ;
In line:47    IDENT: i
In line:47    LEQ: <=
In line:47    NUM: 1
In line:47    SEMICOLON: ;
In line:47    IDENT: i
In line:47    GIVEN: =
In line:47    IDENT: i
In line:47    PLUS: +
In line:47    NUM: 1
In line:47    Rpar: )
In line:47    Lbrac: {
In line:48    IDENT: p
In line:48    GIVEN: =
In line:48    NUM: 3
In line:48    SEMICOLON: ;
In line:48    IDENT: q
In line:48    GIVEN: =
In line:48    NUM: 2
In line:48    SEMICOLON: ;
In line:49    symif: if
In line:49    Lpar: (
In line:49    IDENT: q
In line:49    NEQ: !=
In line:49    NUM: 0
In line:49    Rpar: )
In line:50    Lbrac: {
In line:51    IDENT: move
In line:51    GIVEN: =
In line:51    IDENT: compare
In line:51    Lpar: (
In line:51    IDENT: q
In line:51    COMMA: ,
In line:51    NUM: 0
In line:51    Rpar: )
In line:51    SEMICOLON: ;
In line:52    IDENT: end
In line:52    GIVEN: =
In line:52    IDENT: move
In line:52    TIMES: *
In line:52    IDENT: q
In line:52    SEMICOLON: ;
In line:53    IDENT: po1
In line:53    GIVEN: =
In line:53    IDENT: ss
In line:53    Lspar: [
In line:53    IDENT: p
In line:53    Rspar: ]
In line:53    SEMICOLON: ;
In line:54    symfor: for
In line:54    Lpar: (
In line:54    IDENT: j
In line:54    GIVEN: =
In line:54    NUM: 1
In line:54    SEMICOLON: ;
In line:54    IDENT: j
In line:54    LEQ: <=
In line:54    IDENT: end
In line:54    SEMICOLON: ;
In line:54    IDENT: j
In line:54    GIVEN: =
In line:54    IDENT: j
In line:54    PLUS: +
In line:54    NUM: 1
In line:54    Rpar: )
In line:54    Lbrac: {
In line:55    IDENT: st2
In line:55    GIVEN: =
In line:55    IDENT: pp
In line:55    Lspar: [
In line:55    IDENT: po1
In line:55    PLUS: +
In line:55    IDENT: move
In line:55    Rspar: ]
In line:55    SEMICOLON: ;
In line:56    IDENT: po2
In line:56    GIVEN: =
In line:56    IDENT: ss
In line:56    Lspar: [
In line:56    IDENT: st2
In line:56    Rspar: ]
In line:56    SEMICOLON: ;
In line:57    IDENT: pp
In line:57    Lspar: [
In line:57    IDENT: po1
In line:57    Rspar: ]
In line:57    GIVEN: =
In line:57    IDENT: st2
In line:57    SEMICOLON: ;
In line:58    IDENT: ss
In line:58    Lspar: [
In line:58    IDENT: st2
In line:58    Rspar: ]
In line:58    GIVEN: =
In line:58    IDENT: po1
In line:58    SEMICOLON: ;
In line:59    IDENT: po1
In line:59    GIVEN: =
In line:59    IDENT: po2
In line:59    SEMICOLON: ;
In line:60    symfor: for
In line:60    Lpar: (
In line:60    IDENT: k
In line:60    GIVEN: =
In line:60    NUM: 1
In line:60    SEMICOLON: ;
In line:60    IDENT: k
In line:60    LEQ: <=
In line:60    NUM: 8
In line:60    SEMICOLON: ;
In line:60    IDENT: k
In line:60    GIVEN: =
In line:60    IDENT: k
In line:60    PLUS: +
In line:60    NUM: 1
In line:60    Rpar: )
In line:61    Lbrac: {
In line:62    symprintf: printf
In line:62    Lpar: (
In line:62    IDENT: pp
In line:62    Lspar: [
In line:62    IDENT: k
In line:62    Rspar: ]
In line:62    Rpar: )
In line:62    SEMICOLON: ;
In line:63    symprintf: printf
In line:63    Lpar: (
In line:63    conststr: " "
In line:63    Rpar: )
In line:63    SEMICOLON: ;
In line:64    Rbrac: }
In line:65    symfor: for
In line:65    Lpar: (
In line:65    IDENT: k
In line:65    GIVEN: =
In line:65    NUM: 1
In line:65    SEMICOLON: ;
In line:65    IDENT: k
In line:65    LEQ: <=
In line:65    NUM: 8
In line:65    SEMICOLON: ;
In line:65    IDENT: k
In line:65    GIVEN: =
In line:65    IDENT: k
In line:65    PLUS: +
In line:65    NUM: 1
In line:65    Rpar: )
In line:66    Lbrac: {
In line:67    symprintf: printf
In line:67    Lpar: (
In line:67    IDENT: ss
In line:67    Lspar: [
In line:67    IDENT: k
In line:67    Rspar: ]
In line:67    Rpar: )
In line:67    SEMICOLON: ;
In line:68    symprintf: printf
In line:68    Lpar: (
In line:68    conststr: " "
In line:68    Rpar: )
In line:68    SEMICOLON: ;
In line:69    Rbrac: }
In line:70    Rbrac: }
In line:71    Rbrac: }
In line:72    Rbrac: }
In line:73    Rbrac: }
In line:75    symvoid: void
In line:75    symmain: main
In line:75    Lpar: (
In line:75    Rpar: )
In line:76    Lbrac: {
In line:77    symint: int
In line:77    IDENT: m
In line:77    COMMA: ,
In line:77    IDENT: n
In line:77    COMMA: ,
In line:77    IDENT: i
In line:77    SEMICOLON: ;
In line:78    symprintf: printf
In line:78    Lpar: (
In line:78    conststr: "gcd of 319, 377 = "
In line:78    COMMA: ,
In line:78    IDENT: gcd
In line:78    Lpar: (
In line:78    NUM: 319
In line:78    COMMA: ,
In line:78    NUM: 377
In line:78    Rpar: )
In line:78    Rpar: )
In line:78    SEMICOLON: ;
In line:79    symprintf: printf
In line:79    Lpar: (
In line:79    conststr: " "
In line:79    Rpar: )
In line:79    SEMICOLON: ;
In line:80    symprintf: printf
In line:80    Lpar: (
In line:80    conststr: "gcd of 98, 63 = "
In line:80    COMMA: ,
In line:80    IDENT: gcd
In line:80    Lpar: (
In line:80    NUM: 98
In line:80    COMMA: ,
In line:80    NUM: 63
In line:80    Rpar: )
In line:80    Rpar: )
In line:80    SEMICOLON: ;
In line:81    symprintf: printf
In line:81    Lpar: (
In line:81    conststr: "gcd of 1280, 1250 = "
In line:81    COMMA: ,
In line:81    NUM: 10
In line:81    TIMES: *
In line:81    IDENT: gcd
In line:81    Lpar: (
In line:81    NUM: 1280
In line:81    COMMA: ,
In line:81    NUM: 1250
In line:81    Rpar: )
In line:81    DIVIDE: /
In line:81    NUM: 20
In line:81    TIMES: *
In line:81    NUM: 2
In line:81    Rpar: )
In line:81    SEMICOLON: ;
In line:82    IDENT: complexfor
In line:82    Lpar: (
In line:82    Rpar: )
In line:82    SEMICOLON: ;
In line:83    symprintf: printf
In line:83    Lpar: (
In line:83    conststr: "   fib of 20 = "
In line:83    COMMA: ,
In line:83    IDENT: fib
In line:83    Lpar: (
In line:83    NUM: 20
In line:83    Rpar: )
In line:83    Rpar: )
In line:83    SEMICOLON: ;
In line:84    symscanf: scanf
In line:84    Lpar: (
In line:84    IDENT: n
In line:84    Rpar: )
In line:84    SEMICOLON: ;
In line:85    symif: if
In line:85    Lpar: (
In line:85    IDENT: n
In line:85    GRT: >
In line:85    NUM: 100
In line:85    Rpar: )
In line:86    Lbrac: {
In line:87    symprintf: printf
In line:87    Lpar: (
In line:87    conststr: "your array length should be less than 100!!!"
In line:87    Rpar: )
In line:87    SEMICOLON: ;
In line:88    symreturn: return
In line:88    SEMICOLON: ;
In line:89    Rbrac: }
In line:90    symfor: for
In line:90    Lpar: (
In line:90    IDENT: i
In line:90    GIVEN: =
In line:90    NUM: 0
In line:90    SEMICOLON: ;
In line:90    IDENT: i
In line:90    LES: <
In line:90    IDENT: n
In line:90    SEMICOLON: ;
In line:90    IDENT: i
In line:90    GIVEN: =
In line:90    IDENT: i
In line:90    PLUS: +
In line:90    NUM: 1
In line:90    Rpar: )
In line:91    Lbrac: {
In line:92    symscanf: scanf
In line:92    Lpar: (
In line:92    IDENT: m
In line:92    Rpar: )
In line:92    SEMICOLON: ;
In line:93    IDENT: a
In line:93    Lspar: [
In line:93    IDENT: i
In line:93    Rspar: ]
In line:93    GIVEN: =
In line:93    IDENT: m
In line:93    SEMICOLON: ;
In line:94    Rbrac: }
In line:95    symprintf: printf
In line:95    Lpar: (
In line:95    conststr: "original array: "
In line:95    Rpar: )
In line:95    SEMICOLON: ;
In line:96    symfor: for
In line:96    Lpar: (
In line:96    IDENT: i
In line:96    GIVEN: =
In line:96    NUM: 0
In line:96    SEMICOLON: ;
In line:96    IDENT: i
In line:96    LES: <
In line:96    IDENT: n
In line:96    SEMICOLON: ;
In line:96    IDENT: i
In line:96    GIVEN: =
In line:96    IDENT: i
In line:96    PLUS: +
In line:96    NUM: 1
In line:96    Rpar: )
In line:97    Lbrac: {
In line:98    symprintf: printf
In line:98    Lpar: (
In line:98    conststr: " "
In line:98    COMMA: ,
In line:98    IDENT: a
In line:98    Lspar: [
In line:98    IDENT: i
In line:98    Rspar: ]
In line:98    Rpar: )
In line:98    SEMICOLON: ;
In line:99    Rbrac: }
In line:100    IDENT: bubblesort
In line:100    Lpar: (
In line:100    IDENT: n
In line:100    Rpar: )
In line:100    SEMICOLON: ;
In line:101    symprintf: printf
In line:101    Lpar: (
In line:101    conststr: "sorted array: "
In line:101    Rpar: )
In line:101    SEMICOLON: ;
In line:102    symfor: for
In line:102    Lpar: (
In line:102    IDENT: i
In line:102    GIVEN: =
In line:102    NUM: 0
In line:102    SEMICOLON: ;
In line:102    IDENT: i
In line:102    LES: <
In line:102    IDENT: n
In line:102    SEMICOLON: ;
In line:102    IDENT: i
In line:102    GIVEN: =
In line:102    IDENT: i
In line:102    PLUS: +
In line:102    NUM: 1
In line:102    Rpar: )
In line:103    Lbrac: {
In line:104    symprintf: printf
In line:104    Lpar: (
In line:104    conststr: " "
In line:104    COMMA: ,
In line:104    IDENT: a
In line:104    Lspar: [
In line:104    IDENT: i
In line:104    Rspar: ]
In line:104    Rpar: )
In line:104    SEMICOLON: ;
In line:105    Rbrac: }
In line:106    Rbrac: }
In line:-1    END: 
