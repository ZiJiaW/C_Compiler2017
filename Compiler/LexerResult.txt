In line:1    symconst: const
In line:1    symint: int
In line:1    IDENT: MaxN
In line:1    GIVEN: =
In line:1    NUM: 100
In line:1    COMMA: ,
In line:1    IDENT: a
In line:1    GIVEN: =
In line:1    MINUS: -
In line:1    NUM: 200
In line:1    COMMA: ,
In line:1    IDENT: a3
In line:1    GIVEN: =
In line:1    PLUS: +
In line:1    NUM: 100
In line:1    COMMA: ,
In line:1    IDENT: a1
In line:1    GIVEN: =
In line:1    NUM: 0
In line:1    COMMA: ,
In line:1    IDENT: a2
In line:1    GIVEN: =
In line:1    NUM: 23
In line:1    SEMICOLON: ;
In line:2    symconst: const
In line:2    symchar: char
In line:2    IDENT: b
In line:2    GIVEN: =
In line:2    constch: 'c'
In line:2    COMMA: ,
In line:2    IDENT: d
In line:2    GIVEN: =
In line:2    constch: 'c'
In line:2    SEMICOLON: ;
In line:3    symint: int
In line:3    IDENT: list
In line:3    Lspar: [
In line:3    NUM: 100
In line:3    Rspar: ]
In line:3    COMMA: ,
In line:3    IDENT: l
In line:3    COMMA: ,
In line:3    IDENT: t
In line:3    SEMICOLON: ;
In line:4    symchar: char
In line:4    IDENT: a5
In line:4    Lspar: [
In line:4    NUM: 20
In line:4    Rspar: ]
In line:4    COMMA: ,
In line:4    IDENT: e
In line:4    COMMA: ,
In line:4    IDENT: a4
In line:4    Lspar: [
In line:4    NUM: 20
In line:4    Rspar: ]
In line:4    COMMA: ,
In line:4    IDENT: t1
In line:4    SEMICOLON: ;
In line:5    symvoid: void
In line:5    IDENT: recor_printU
In line:5    Lpar: (
In line:5    symint: int
In line:5    IDENT: N
In line:5    Rpar: )
In line:6    Lbrac: {
In line:7    symint: int
In line:7    IDENT: i
In line:7    COMMA: ,
In line:7    IDENT: s
In line:7    SEMICOLON: ;
In line:8    IDENT: l
In line:8    GIVEN: =
In line:8    IDENT: b
In line:8    PLUS: +
In line:8    IDENT: d
In line:8    SEMICOLON: ;
In line:9    IDENT: s
In line:9    GIVEN: =
In line:9    NUM: 2
In line:9    TIMES: *
In line:9    NUM: 3
In line:9    MINUS: -
In line:9    NUM: 4
In line:9    TIMES: *
In line:9    Lpar: (
In line:9    NUM: 3
In line:9    TIMES: *
In line:9    NUM: 1
In line:9    PLUS: +
In line:9    Lpar: (
In line:9    NUM: 3
In line:9    PLUS: +
In line:9    NUM: 4
In line:9    PLUS: +
In line:9    NUM: 5
In line:9    PLUS: +
In line:9    NUM: 6
In line:9    TIMES: *
In line:9    Lpar: (
In line:9    NUM: 7
In line:9    TIMES: *
In line:9    NUM: 8
In line:9    TIMES: *
In line:9    NUM: 9
In line:9    MINUS: -
In line:9    NUM: 23
In line:9    Rpar: )
In line:9    Rpar: )
In line:9    TIMES: *
In line:9    NUM: 34
In line:9    MINUS: -
In line:9    NUM: 21
In line:9    Rpar: )
In line:9    TIMES: *
In line:9    NUM: 14
In line:9    SEMICOLON: ;
In line:10    IDENT: t
In line:10    GIVEN: =
In line:10    MINUS: -
In line:10    NUM: 3
In line:10    TIMES: *
In line:10    MINUS: -
In line:10    NUM: 4
In line:10    MINUS: -
In line:10    NUM: 2
In line:10    DIVIDE: /
In line:10    NUM: 1
In line:10    SEMICOLON: ;
In line:11    IDENT: t1
In line:11    GIVEN: =
In line:11    MINUS: -
In line:11    NUM: 2
In line:11    DIVIDE: /
In line:11    MINUS: -
In line:11    NUM: 1
In line:11    MINUS: -
In line:11    PLUS: +
In line:11    NUM: 6
In line:11    DIVIDE: /
In line:11    MINUS: -
In line:11    NUM: 2
In line:11    SEMICOLON: ;
In line:12    symfor: for
In line:12    Lpar: (
In line:12    IDENT: i
In line:12    GIVEN: =
In line:12    NUM: 0
In line:12    SEMICOLON: ;
In line:12    IDENT: i
In line:12    NEQ: !=
In line:12    IDENT: N
In line:12    SEMICOLON: ;
In line:12    IDENT: i
In line:12    GIVEN: =
In line:12    IDENT: i
In line:12    PLUS: +
In line:12    NUM: 1
In line:12    Rpar: )
In line:12    Lbrac: {
In line:13    IDENT: list
In line:13    Lspar: [
In line:13    IDENT: i
In line:13    Rspar: ]
In line:13    GIVEN: =
In line:13    IDENT: i
In line:13    SEMICOLON: ;
In line:14    IDENT: t
In line:14    GIVEN: =
In line:14    IDENT: list
In line:14    Lspar: [
In line:14    IDENT: i
In line:14    Rspar: ]
In line:14    SEMICOLON: ;
In line:15    symprintf: printf
In line:15    Lpar: (
In line:15    conststr: " "
In line:15    COMMA: ,
In line:15    IDENT: list
In line:15    Lspar: [
In line:15    IDENT: i
In line:15    Rspar: ]
In line:15    Rpar: )
In line:15    SEMICOLON: ;
In line:16    Rbrac: }
In line:17    Rbrac: }
In line:18    symvoid: void
In line:18    IDENT: recor_printD
In line:18    Lpar: (
In line:18    symint: int
In line:18    IDENT: N
In line:18    Rpar: )
In line:19    Lbrac: {
In line:20    symif: if
In line:20    Lpar: (
In line:20    IDENT: N
In line:20    NEQ: !=
In line:20    NUM: 0
In line:20    Rpar: )
In line:20    Lbrac: {
In line:21    symprintf: printf
In line:21    Lpar: (
In line:21    conststr: " "
In line:21    COMMA: ,
In line:21    IDENT: N
In line:21    Rpar: )
In line:21    SEMICOLON: ;
In line:22    IDENT: recor_printD
In line:22    Lpar: (
In line:22    IDENT: N
In line:22    MINUS: -
In line:22    NUM: 1
In line:22    Rpar: )
In line:22    SEMICOLON: ;
In line:23    Rbrac: }
In line:24    Rbrac: }
In line:25    symint: int
In line:25    IDENT: Isright
In line:25    Lpar: (
In line:25    symint: int
In line:25    IDENT: N
In line:25    COMMA: ,
In line:25    symchar: char
In line:25    IDENT: type
In line:25    Rpar: )
In line:26    Lbrac: {
In line:27    symconst: const
In line:27    symchar: char
In line:27    IDENT: b
In line:27    GIVEN: =
In line:27    constch: 'c'
In line:27    COMMA: ,
In line:27    IDENT: d
In line:27    GIVEN: =
In line:27    constch: 'c'
In line:27    SEMICOLON: ;
In line:28    symif: if
In line:28    Lpar: (
In line:28    IDENT: N
In line:28    GEQ: >=
In line:28    NUM: 100
In line:28    Rpar: )
In line:28    Lbrac: {
In line:29    symprintf: printf
In line:29    Lpar: (
In line:29    conststr: "The number is too large!"
In line:29    Rpar: )
In line:29    SEMICOLON: ;
In line:30    symreturn: return
In line:30    Lpar: (
In line:30    NUM: 0
In line:30    Rpar: )
In line:30    SEMICOLON: ;
In line:31    Rbrac: }
In line:32    symif: if
In line:32    Lpar: (
In line:32    IDENT: N
In line:32    GRT: >
In line:32    NUM: 0
In line:32    Rpar: )
In line:32    Lbrac: {
In line:33    symif: if
In line:33    Lpar: (
In line:33    IDENT: type
In line:33    EQ: ==
In line:33    constch: 'u'
In line:33    Rpar: )
In line:34    symreturn: return
In line:34    Lpar: (
In line:34    NUM: 1
In line:34    Rpar: )
In line:34    SEMICOLON: ;
In line:35    symif: if
In line:35    Lpar: (
In line:35    IDENT: type
In line:35    EQ: ==
In line:35    constch: 'd'
In line:35    Rpar: )
In line:36    symreturn: return
In line:36    Lpar: (
In line:36    NUM: 2
In line:36    Rpar: )
In line:36    SEMICOLON: ;
In line:37    Rbrac: }
In line:38    symreturn: return
In line:38    Lpar: (
In line:38    NUM: 0
In line:38    Rpar: )
In line:38    SEMICOLON: ;
In line:39    Rbrac: }
In line:40    symvoid: void
In line:40    IDENT: sumandmul
In line:40    Lpar: (
In line:40    symint: int
In line:40    IDENT: N
In line:40    Rpar: )
In line:41    Lbrac: {
In line:42    symint: int
In line:42    IDENT: i
In line:42    COMMA: ,
In line:42    IDENT: sum
In line:42    COMMA: ,
In line:42    IDENT: mul
In line:42    SEMICOLON: ;
In line:43    IDENT: sum
In line:43    GIVEN: =
In line:43    NUM: 0
In line:43    SEMICOLON: ;
In line:44    IDENT: mul
In line:44    GIVEN: =
In line:44    NUM: 1
In line:44    SEMICOLON: ;
In line:45    symfor: for
In line:45    Lpar: (
In line:45    IDENT: i
In line:45    GIVEN: =
In line:45    NUM: 0
In line:45    SEMICOLON: ;
In line:45    IDENT: i
In line:45    NEQ: !=
In line:45    IDENT: N
In line:45    SEMICOLON: ;
In line:45    IDENT: i
In line:45    GIVEN: =
In line:45    IDENT: i
In line:45    PLUS: +
In line:45    NUM: 1
In line:45    Rpar: )
In line:45    Lbrac: {
In line:46    IDENT: sum
In line:46    GIVEN: =
In line:46    IDENT: sum
In line:46    PLUS: +
In line:46    IDENT: i
In line:46    SEMICOLON: ;
In line:47    Rbrac: }
In line:48    symprintf: printf
In line:48    Lpar: (
In line:48    IDENT: sum
In line:48    Rpar: )
In line:48    SEMICOLON: ;
In line:49    symprintf: printf
In line:49    Lpar: (
In line:49    conststr: " "
In line:49    Rpar: )
In line:49    SEMICOLON: ;
In line:50    symfor: for
In line:50    Lpar: (
In line:50    IDENT: i
In line:50    GIVEN: =
In line:50    NUM: 0
In line:50    SEMICOLON: ;
In line:50    IDENT: i
In line:50    NEQ: !=
In line:50    IDENT: N
In line:50    SEMICOLON: ;
In line:50    IDENT: i
In line:50    GIVEN: =
In line:50    IDENT: i
In line:50    PLUS: +
In line:50    NUM: 1
In line:50    Rpar: )
In line:50    Lbrac: {
In line:51    symif: if
In line:51    Lpar: (
In line:51    IDENT: list
In line:51    Lspar: [
In line:51    IDENT: i
In line:51    Rspar: ]
In line:51    NEQ: !=
In line:51    NUM: 0
In line:51    Rpar: )
In line:52    IDENT: mul
In line:52    GIVEN: =
In line:52    IDENT: mul
In line:52    TIMES: *
In line:52    IDENT: list
In line:52    Lspar: [
In line:52    IDENT: i
In line:52    Rspar: ]
In line:52    SEMICOLON: ;
In line:53    Rbrac: }
In line:54    symprintf: printf
In line:54    Lpar: (
In line:54    IDENT: mul
In line:54    Rpar: )
In line:54    SEMICOLON: ;
In line:55    Rbrac: }
In line:57    symvoid: void
In line:57    symmain: main
In line:57    Lpar: (
In line:57    Rpar: )
In line:58    Lbrac: {
In line:59    symint: int
In line:59    IDENT: N
In line:59    COMMA: ,
In line:59    IDENT: t
In line:59    SEMICOLON: ;
In line:60    symchar: char
In line:60    IDENT: type
In line:60    SEMICOLON: ;
In line:61    symprintf: printf
In line:61    Lpar: (
In line:61    conststr: "Please enter the number and arrangement of ways, u said ascending order, d said descending order!"
In line:61    Rpar: )
In line:61    SEMICOLON: ;
In line:62    symscanf: scanf
In line:62    Lpar: (
In line:62    IDENT: N
In line:62    COMMA: ,
In line:62    IDENT: type
In line:62    Rpar: )
In line:62    SEMICOLON: ;
In line:63    IDENT: t
In line:63    GIVEN: =
In line:63    IDENT: Isright
In line:63    Lpar: (
In line:63    IDENT: N
In line:63    COMMA: ,
In line:63    IDENT: type
In line:63    Rpar: )
In line:63    SEMICOLON: ;
In line:65    symswitch: switch
In line:65    Lpar: (
In line:65    IDENT: t
In line:65    Rpar: )
In line:65    Lbrac: {
In line:66    symcase: case
In line:66    NUM: 1
In line:66    COLON: :
In line:67    IDENT: recor_printU
In line:67    Lpar: (
In line:67    IDENT: N
In line:67    Rpar: )
In line:67    SEMICOLON: ;
In line:68    symcase: case
In line:68    NUM: 2
In line:68    COLON: :
In line:68    Lbrac: {
In line:69    IDENT: l
In line:69    GIVEN: =
In line:69    NUM: 0
In line:69    SEMICOLON: ;
In line:70    IDENT: recor_printD
In line:70    Lpar: (
In line:70    IDENT: N
In line:70    Rpar: )
In line:70    SEMICOLON: ;
In line:72    Rbrac: }
In line:73    symcase: case
In line:73    NUM: 0
In line:73    COLON: :
In line:74    symprintf: printf
In line:74    Lpar: (
In line:74    conststr: "Input does not match the syntax, exit!"
In line:74    Rpar: )
In line:74    SEMICOLON: ;
In line:75    symdefault: default
In line:75    COLON: :
In line:76    symprintf: printf
In line:76    Lpar: (
In line:76    conststr: "Input does not match the syntax, exit!"
In line:76    Rpar: )
In line:76    SEMICOLON: ;
In line:77    Rbrac: }
In line:78    symif: if
In line:78    Lpar: (
In line:78    IDENT: t
In line:78    NEQ: !=
In line:78    NUM: 0
In line:78    Rpar: )
In line:78    Lbrac: {
In line:79    symprintf: printf
In line:79    Lpar: (
In line:79    conststr: "Whether or not to sum and mul these number, 0 or 1:"
In line:79    Rpar: )
In line:79    SEMICOLON: ;
In line:80    symscanf: scanf
In line:80    Lpar: (
In line:80    IDENT: t
In line:80    Rpar: )
In line:80    SEMICOLON: ;
In line:81    symif: if
In line:81    Lpar: (
In line:81    IDENT: t
In line:81    EQ: ==
In line:81    NUM: 1
In line:81    Rpar: )
In line:82    IDENT: sumandmul
In line:82    Lpar: (
In line:82    IDENT: N
In line:82    Rpar: )
In line:82    SEMICOLON: ;
In line:83    symelse: else
In line:84    symprintf: printf
In line:84    Lpar: (
In line:84    conststr: "The program is over!"
In line:84    Rpar: )
In line:84    SEMICOLON: ;
In line:85    Rbrac: }
In line:86    symprintf: printf
In line:86    Lpar: (
In line:86    conststr: "Thanks for trying, Bye!"
In line:86    Rpar: )
In line:86    SEMICOLON: ;
In line:87    Rbrac: }
In line:-1    END: 
