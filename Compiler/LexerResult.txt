In line:1    symint: int
In line:1    IDENT: a
In line:1    SEMICOLON: ;
In line:2    symint: int
In line:2    IDENT: cal
In line:2    Lpar: (
In line:2    symint: int
In line:2    IDENT: a
In line:2    COMMA: ,
In line:2    symint: int
In line:2    IDENT: b
In line:2    Rpar: )
In line:3    Lbrac: {
In line:4    symif: if
In line:4    Lpar: (
In line:4    IDENT: b
In line:4    LEQ: <=
In line:4    NUM: 0
In line:4    Rpar: )
In line:5    Lbrac: {
In line:6    symreturn: return
In line:6    Lpar: (
In line:6    NUM: 0
In line:6    Rpar: )
In line:6    SEMICOLON: ;
In line:7    Rbrac: }
In line:8    symelse: else
In line:9    Lbrac: {
In line:10    symreturn: return
In line:10    Lpar: (
In line:10    IDENT: cal
In line:10    Lpar: (
In line:10    IDENT: a
In line:10    COMMA: ,
In line:10    IDENT: b
In line:10    MINUS: -
In line:10    NUM: 1
In line:10    Rpar: )
In line:10    PLUS: +
In line:10    NUM: 1
In line:10    Rpar: )
In line:10    SEMICOLON: ;
In line:11    Rbrac: }
In line:12    Rbrac: }
In line:13    symvoid: void
In line:13    symmain: main
In line:13    Lpar: (
In line:13    Rpar: )
In line:14    Lbrac: {
In line:15    symint: int
In line:15    IDENT: b
In line:15    COMMA: ,
In line:15    IDENT: c
In line:15    SEMICOLON: ;
In line:16    symchar: char
In line:16    IDENT: d
In line:16    SEMICOLON: ;
In line:17    IDENT: a
In line:17    GIVEN: =
In line:17    NUM: 1
In line:17    SEMICOLON: ;
In line:18    IDENT: b
In line:18    GIVEN: =
In line:18    NUM: 2
In line:18    SEMICOLON: ;
In line:19    IDENT: c
In line:19    GIVEN: =
In line:19    NUM: 3
In line:19    SEMICOLON: ;
In line:20    IDENT: a
In line:20    GIVEN: =
In line:20    Lpar: (
In line:20    MINUS: -
In line:20    IDENT: c
In line:20    Rpar: )
In line:20    TIMES: *
In line:20    IDENT: b
In line:20    TIMES: *
In line:20    Lpar: (
In line:20    MINUS: -
In line:20    IDENT: c
In line:20    Rpar: )
In line:20    PLUS: +
In line:20    IDENT: b
In line:20    SEMICOLON: ;
In line:21    symprintf: printf
In line:21    Lpar: (
In line:21    IDENT: a
In line:21    Rpar: )
In line:21    SEMICOLON: ;
In line:22    IDENT: a
In line:22    GIVEN: =
In line:22    IDENT: b
In line:22    PLUS: +
In line:22    IDENT: c
In line:22    SEMICOLON: ;
In line:23    IDENT: a
In line:23    GIVEN: =
In line:23    IDENT: b
In line:23    PLUS: +
In line:23    IDENT: c
In line:23    PLUS: +
In line:23    IDENT: cal
In line:23    Lpar: (
In line:23    NUM: 2
In line:23    COMMA: ,
In line:23    NUM: 3
In line:23    Rpar: )
In line:23    SEMICOLON: ;
In line:24    symprintf: printf
In line:24    Lpar: (
In line:24    conststr: " "
In line:24    COMMA: ,
In line:24    IDENT: a
In line:24    Rpar: )
In line:24    SEMICOLON: ;
In line:26    symscanf: scanf
In line:26    Lpar: (
In line:26    IDENT: d
In line:26    Rpar: )
In line:26    SEMICOLON: ;
In line:27    symswitch: switch
In line:27    Lpar: (
In line:27    IDENT: d
In line:27    Rpar: )
In line:28    Lbrac: {
In line:29    symcase: case
In line:29    constch: 'a'
In line:29    COLON: :
In line:29    Lbrac: {
In line:30    symprintf: printf
In line:30    Lpar: (
In line:30    conststr: "you input a!"
In line:30    Rpar: )
In line:30    SEMICOLON: ;
In line:31    Rbrac: }
In line:32    symcase: case
In line:32    constch: 'b'
In line:32    COLON: :
In line:32    Lbrac: {
In line:33    symprintf: printf
In line:33    Lpar: (
In line:33    conststr: "you input b!"
In line:33    Rpar: )
In line:33    SEMICOLON: ;
In line:34    Rbrac: }
In line:35    symdefault: default
In line:35    COLON: :
In line:35    Lbrac: {
In line:36    symprintf: printf
In line:36    Lpar: (
In line:36    conststr: "not a or b!"
In line:36    Rpar: )
In line:36    SEMICOLON: ;
In line:37    Rbrac: }
In line:38    Rbrac: }
In line:39    symreturn: return
In line:39    SEMICOLON: ;
In line:40    Rbrac: }
In line:-1    END: 
