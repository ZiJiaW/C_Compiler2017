In line:1    symconst: const
In line:1    symint: int
In line:1    IDENT: MAX
In line:1    GIVEN: =
In line:1    NUM: 1000
In line:1    COMMA: ,
In line:1    IDENT: a32
In line:1    GIVEN: =
In line:1    MINUS: -
In line:1    NUM: 32
In line:1    COMMA: ,
In line:1    IDENT: b24
In line:1    GIVEN: =
In line:1    NUM: 24
In line:1    SEMICOLON: ;
In line:2    symconst: const
In line:2    symchar: char
In line:2    IDENT: qop
In line:2    GIVEN: =
In line:2    constch: 'r'
In line:2    COMMA: ,
In line:2    IDENT: name
In line:2    GIVEN: =
In line:2    constch: '5'
In line:2    SEMICOLON: ;
In line:3    symconst: const
In line:3    symchar: char
In line:3    IDENT: ca
In line:3    GIVEN: =
In line:3    constch: 'a'
In line:3    COMMA: ,
In line:3    IDENT: ct
In line:3    GIVEN: =
In line:3    constch: 't'
In line:3    SEMICOLON: ;
In line:4    symconst: const
In line:4    symint: int
In line:4    IDENT: index2a01
In line:4    GIVEN: =
In line:4    NUM: 15
In line:4    COMMA: ,
In line:4    IDENT: i1a
In line:4    GIVEN: =
In line:4    NUM: 0
In line:4    COMMA: ,
In line:4    IDENT: p
In line:4    GIVEN: =
In line:4    NUM: 0
In line:4    SEMICOLON: ;
In line:5    symconst: const
In line:5    symchar: char
In line:5    IDENT: c
In line:5    GIVEN: =
In line:5    constch: '*'
In line:5    SEMICOLON: ;
In line:6    symchar: char
In line:6    IDENT: x
In line:6    COMMA: ,
In line:6    IDENT: a5
In line:6    SEMICOLON: ;
In line:7    symchar: char
In line:7    IDENT: _s
In line:7    SEMICOLON: ;
In line:8    symint: int
In line:8    IDENT: i
In line:8    COMMA: ,
In line:8    IDENT: aaw5
In line:8    COMMA: ,
In line:8    IDENT: _errIndex
In line:8    SEMICOLON: ;
In line:9    symint: int
In line:9    IDENT: hea125
In line:9    SEMICOLON: ;
In line:10    symchar: char
In line:10    IDENT: arr
In line:10    Lspar: [
In line:10    NUM: 101
In line:10    Rspar: ]
In line:10    COMMA: ,
In line:10    IDENT: arr2
In line:10    COMMA: ,
In line:10    IDENT: arr3
In line:10    Lspar: [
In line:10    NUM: 255
In line:10    Rspar: ]
In line:10    SEMICOLON: ;
In line:11    symint: int
In line:11    IDENT: qw
In line:11    Lspar: [
In line:11    NUM: 102
In line:11    Rspar: ]
In line:11    COMMA: ,
In line:11    IDENT: qw2
In line:11    Lspar: [
In line:11    NUM: 17
In line:11    Rspar: ]
In line:11    COMMA: ,
In line:11    IDENT: qw3
In line:11    SEMICOLON: ;
In line:12    symint: int
In line:12    IDENT: gl
In line:12    COMMA: ,
In line:12    IDENT: ch
In line:12    Lspar: [
In line:12    NUM: 26
In line:12    Rspar: ]
In line:12    SEMICOLON: ;
In line:13    symchar: char
In line:13    IDENT: fffk
In line:13    COMMA: ,
In line:13    IDENT: ffk
In line:13    Lspar: [
In line:13    NUM: 31
In line:13    Rspar: ]
In line:13    COMMA: ,
In line:13    IDENT: ch2
In line:13    Lspar: [
In line:13    NUM: 26
In line:13    Rspar: ]
In line:13    SEMICOLON: ;
In line:14    symvoid: void
In line:14    IDENT: testDeclare
In line:14    Lpar: (
In line:14    Rpar: )
In line:15    Lbrac: {
In line:16    symconst: const
In line:16    symint: int
In line:16    IDENT: a32
In line:16    GIVEN: =
In line:16    NUM: 312
In line:16    COMMA: ,
In line:16    IDENT: _b
In line:16    GIVEN: =
In line:16    PLUS: +
In line:16    NUM: 142
In line:16    SEMICOLON: ;
In line:17    symconst: const
In line:17    symchar: char
In line:17    IDENT: h
In line:17    GIVEN: =
In line:17    constch: 'a'
In line:17    COMMA: ,
In line:17    IDENT: ct
In line:17    GIVEN: =
In line:17    constch: 'C'
In line:17    COMMA: ,
In line:17    IDENT: pp
In line:17    GIVEN: =
In line:17    constch: '3'
In line:17    SEMICOLON: ;
In line:18    symint: int
In line:18    IDENT: arr
In line:18    Lspar: [
In line:18    NUM: 1
In line:18    Rspar: ]
In line:18    COMMA: ,
In line:18    IDENT: arr_2
In line:18    Lspar: [
In line:18    NUM: 15
In line:18    Rspar: ]
In line:18    COMMA: ,
In line:18    IDENT: sum
In line:18    COMMA: ,
In line:18    IDENT: sub
In line:18    SEMICOLON: ;
In line:19    symchar: char
In line:19    IDENT: hih
In line:19    COMMA: ,
In line:19    IDENT: lowct
In line:19    COMMA: ,
In line:19    IDENT: uppp
In line:19    SEMICOLON: ;
In line:20    IDENT: sum
In line:20    GIVEN: =
In line:20    IDENT: a32
In line:20    PLUS: +
In line:20    IDENT: _b
In line:20    SEMICOLON: ;
In line:21    IDENT: hih
In line:21    GIVEN: =
In line:21    IDENT: h
In line:21    MINUS: -
In line:21    NUM: 32
In line:21    SEMICOLON: ;
In line:22    IDENT: lowct
In line:22    GIVEN: =
In line:22    IDENT: ct
In line:22    PLUS: +
In line:22    NUM: 32
In line:22    SEMICOLON: ;
In line:23    IDENT: uppp
In line:23    GIVEN: =
In line:23    IDENT: pp
In line:23    PLUS: +
In line:23    NUM: 1
In line:23    SEMICOLON: ;
In line:24    IDENT: arr
In line:24    Lspar: [
In line:24    NUM: 0
In line:24    Rspar: ]
In line:24    GIVEN: =
In line:24    IDENT: a32
In line:24    MINUS: -
In line:24    NUM: 300
In line:24    SEMICOLON: ;
In line:25    IDENT: arr
In line:25    Lspar: [
In line:25    NUM: 1
In line:25    Rspar: ]
In line:25    GIVEN: =
In line:25    IDENT: _b
In line:25    MINUS: -
In line:25    NUM: 140
In line:25    SEMICOLON: ;
In line:26    symprintf: printf
In line:26    Lpar: (
In line:26    IDENT: sum
In line:26    Rpar: )
In line:26    SEMICOLON: ;
In line:26    symprintf: printf
In line:26    Lpar: (
In line:26    conststr: " "
In line:26    COMMA: ,
In line:26    IDENT: hih
In line:26    Rpar: )
In line:26    SEMICOLON: ;
In line:26    symprintf: printf
In line:26    Lpar: (
In line:26    conststr: " "
In line:26    COMMA: ,
In line:26    IDENT: lowct
In line:26    Rpar: )
In line:26    SEMICOLON: ;
In line:26    symprintf: printf
In line:26    Lpar: (
In line:26    conststr: " "
In line:26    COMMA: ,
In line:26    IDENT: uppp
In line:26    Rpar: )
In line:26    SEMICOLON: ;
In line:27    symprintf: printf
In line:27    Lpar: (
In line:27    conststr: " "
In line:27    COMMA: ,
In line:27    IDENT: arr
In line:27    Lspar: [
In line:27    NUM: 0
In line:27    Rspar: ]
In line:27    Rpar: )
In line:27    SEMICOLON: ;
In line:27    symprintf: printf
In line:27    Lpar: (
In line:27    conststr: " "
In line:27    COMMA: ,
In line:27    IDENT: arr
In line:27    Lspar: [
In line:27    NUM: 1
In line:27    Rspar: ]
In line:27    Rpar: )
In line:27    SEMICOLON: ;
In line:28    Rbrac: }
In line:29    symvoid: void
In line:29    IDENT: testForAndArray
In line:29    Lpar: (
In line:29    Rpar: )
In line:30    Lbrac: {
In line:31    symchar: char
In line:31    IDENT: p
In line:31    SEMICOLON: ;
In line:32    symint: int
In line:32    IDENT: n
In line:32    COMMA: ,
In line:32    IDENT: m
In line:32    COMMA: ,
In line:32    IDENT: sum
In line:32    SEMICOLON: ;
In line:33    symfor: for
In line:33    Lpar: (
In line:33    IDENT: p
In line:33    GIVEN: =
In line:33    IDENT: ca
In line:33    SEMICOLON: ;
In line:33    IDENT: p
In line:33    LEQ: <=
In line:33    constch: 'z'
In line:33    SEMICOLON: ;
In line:33    IDENT: p
In line:33    GIVEN: =
In line:33    IDENT: p
In line:33    PLUS: +
In line:33    NUM: 1
In line:33    Rpar: )
In line:34    Lbrac: {
In line:35    IDENT: ch2
In line:35    Lspar: [
In line:35    IDENT: p
In line:35    MINUS: -
In line:35    IDENT: ca
In line:35    Rspar: ]
In line:35    GIVEN: =
In line:35    IDENT: p
In line:35    SEMICOLON: ;
In line:36    symprintf: printf
In line:36    Lpar: (
In line:36    IDENT: ch2
In line:36    Lspar: [
In line:36    IDENT: p
In line:36    MINUS: -
In line:36    IDENT: ca
In line:36    Rspar: ]
In line:36    Rpar: )
In line:36    SEMICOLON: ;
In line:37    Rbrac: }
In line:38    IDENT: m
In line:38    GIVEN: =
In line:38    NUM: 50
In line:38    SEMICOLON: ;
In line:39    IDENT: sum
In line:39    GIVEN: =
In line:39    NUM: 0
In line:39    SEMICOLON: ;
In line:40    symfor: for
In line:40    Lpar: (
In line:40    IDENT: n
In line:40    GIVEN: =
In line:40    NUM: 100
In line:40    SEMICOLON: ;
In line:40    IDENT: n
In line:40    GEQ: >=
In line:40    IDENT: m
In line:40    SEMICOLON: ;
In line:40    IDENT: n
In line:40    GIVEN: =
In line:40    IDENT: n
In line:40    MINUS: -
In line:40    NUM: 1
In line:40    Rpar: )
In line:41    Lbrac: {
In line:42    IDENT: sum
In line:42    GIVEN: =
In line:42    IDENT: sum
In line:42    PLUS: +
In line:42    IDENT: n
In line:42    SEMICOLON: ;
In line:43    symif: if
In line:43    Lpar: (
In line:43    IDENT: n
In line:43    EQ: ==
In line:43    IDENT: m
In line:43    Rpar: )
In line:44    IDENT: m
In line:44    GIVEN: =
In line:44    NUM: 20
In line:44    SEMICOLON: ;
In line:45    symelse: else
In line:46    IDENT: n
In line:46    GIVEN: =
In line:46    IDENT: n
In line:46    MINUS: -
In line:46    NUM: 1
In line:46    SEMICOLON: ;
In line:47    Rbrac: }
In line:48    symprintf: printf
In line:48    Lpar: (
In line:48    conststr: " "
In line:48    COMMA: ,
In line:48    IDENT: sum
In line:48    Rpar: )
In line:48    SEMICOLON: ;
In line:49    symfor: for
In line:49    Lpar: (
In line:49    IDENT: n
In line:49    GIVEN: =
In line:49    NUM: 0
In line:49    SEMICOLON: ;
In line:49    IDENT: n
In line:49    LES: <
In line:49    NUM: 0
In line:49    SEMICOLON: ;
In line:49    IDENT: n
In line:49    GIVEN: =
In line:49    IDENT: n
In line:49    MINUS: -
In line:49    NUM: 1
In line:49    Rpar: )
In line:50    Lbrac: {
In line:51    symif: if
In line:51    Lpar: (
In line:51    IDENT: n
In line:51    LES: <
In line:51    NUM: 0
In line:51    Rpar: )
In line:52    symreturn: return
In line:52    SEMICOLON: ;
In line:53    symprintf: printf
In line:53    Lpar: (
In line:53    conststr: "For is ok!"
In line:53    Rpar: )
In line:53    SEMICOLON: ;
In line:54    Rbrac: }
In line:55    Rbrac: }
In line:56    symint: int
In line:56    IDENT: sum
In line:56    Lpar: (
In line:56    symint: int
In line:56    IDENT: a
In line:56    COMMA: ,
In line:56    symint: int
In line:56    IDENT: b
In line:56    Rpar: )
In line:57    Lbrac: {
In line:58    symreturn: return
In line:58    Lpar: (
In line:58    IDENT: a
In line:58    PLUS: +
In line:58    IDENT: b
In line:58    Rpar: )
In line:58    SEMICOLON: ;
In line:59    Rbrac: }
In line:60    symint: int
In line:60    IDENT: testExpression
In line:60    Lpar: (
In line:60    Rpar: )
In line:61    Lbrac: {
In line:62    symconst: const
In line:62    symint: int
In line:62    IDENT: t
In line:62    GIVEN: =
In line:62    PLUS: +
In line:62    NUM: 32
In line:62    COMMA: ,
In line:62    IDENT: r
In line:62    GIVEN: =
In line:62    MINUS: -
In line:62    NUM: 13
In line:62    COMMA: ,
In line:62    IDENT: q
In line:62    GIVEN: =
In line:62    NUM: 24
In line:62    SEMICOLON: ;
In line:63    symconst: const
In line:63    symchar: char
In line:63    IDENT: e
In line:63    GIVEN: =
In line:63    constch: '9'
In line:63    COMMA: ,
In line:63    IDENT: w
In line:63    GIVEN: =
In line:63    constch: '0'
In line:63    COMMA: ,
In line:63    IDENT: y
In line:63    GIVEN: =
In line:63    constch: '+'
In line:63    SEMICOLON: ;
In line:64    symint: int
In line:64    IDENT: cal
In line:64    COMMA: ,
In line:64    IDENT: loop
In line:64    COMMA: ,
In line:64    IDENT: s
In line:64    SEMICOLON: ;
In line:65    IDENT: s
In line:65    GIVEN: =
In line:65    NUM: 0
In line:65    SEMICOLON: ;
In line:66    IDENT: cal
In line:66    GIVEN: =
In line:66    MINUS: -
In line:66    IDENT: t
In line:66    TIMES: *
In line:66    Lpar: (
In line:66    IDENT: r
In line:66    PLUS: +
In line:66    NUM: 31
In line:66    MINUS: -
In line:66    Lpar: (
In line:66    IDENT: e
In line:66    MINUS: -
In line:66    constch: '0'
In line:66    Rpar: )
In line:66    DIVIDE: /
In line:66    NUM: 3
In line:66    PLUS: +
In line:66    NUM: 0
In line:66    Rpar: )
In line:66    PLUS: +
In line:66    Lpar: (
In line:66    MINUS: -
In line:66    PLUS: +
In line:66    NUM: 11
In line:66    DIVIDE: /
In line:66    NUM: 5
In line:66    PLUS: +
In line:66    Lpar: (
In line:66    IDENT: ch2
In line:66    Lspar: [
In line:66    NUM: 9
In line:66    Rspar: ]
In line:66    MINUS: -
In line:66    constch: 'a'
In line:66    Rpar: )
In line:66    TIMES: *
In line:66    NUM: 2
In line:66    Rpar: )
In line:66    SEMICOLON: ;
In line:67    symprintf: printf
In line:67    Lpar: (
In line:67    IDENT: cal
In line:67    Rpar: )
In line:67    SEMICOLON: ;
In line:68    symif: if
In line:68    Lpar: (
In line:68    MINUS: -
In line:68    IDENT: t
In line:68    TIMES: *
In line:68    Lpar: (
In line:68    IDENT: r
In line:68    PLUS: +
In line:68    NUM: 31
In line:68    MINUS: -
In line:68    Lpar: (
In line:68    IDENT: e
In line:68    MINUS: -
In line:68    constch: '0'
In line:68    Rpar: )
In line:68    DIVIDE: /
In line:68    NUM: 3
In line:68    PLUS: +
In line:68    NUM: 0
In line:68    Rpar: )
In line:68    PLUS: +
In line:68    Lpar: (
In line:68    MINUS: -
In line:68    PLUS: +
In line:68    NUM: 11
In line:68    DIVIDE: /
In line:68    NUM: 5
In line:68    PLUS: +
In line:68    Lpar: (
In line:68    IDENT: ch2
In line:68    Lspar: [
In line:68    NUM: 9
In line:68    Rspar: ]
In line:68    MINUS: -
In line:68    constch: 'a'
In line:68    Rpar: )
In line:68    TIMES: *
In line:68    NUM: 2
In line:68    Rpar: )
In line:68    LEQ: <=
In line:68    IDENT: r
In line:68    PLUS: +
In line:68    NUM: 31
In line:68    Rpar: )
In line:69    symprintf: printf
In line:69    Lpar: (
In line:69    conststr: "-t*(r+31-(e-'0')/3+0)+(-+11/5+(ch2[9]-'a')*2)<=r+31"
In line:69    Rpar: )
In line:69    SEMICOLON: ;
In line:70    symelse: else
In line:71    symprintf: printf
In line:71    Lpar: (
In line:71    conststr: "-t*(r+31-(e-'0')/3+0)+(-+11/5+(ch2[9]-'a')*2)>r+31"
In line:71    Rpar: )
In line:71    SEMICOLON: ;
In line:72    symfor: for
In line:72    Lpar: (
In line:72    IDENT: loop
In line:72    GIVEN: =
In line:72    MINUS: -
In line:72    NUM: 3
In line:72    PLUS: +
In line:72    NUM: 0
In line:72    PLUS: +
In line:72    IDENT: sum
In line:72    Lpar: (
In line:72    IDENT: r
In line:72    PLUS: +
In line:72    NUM: 31
In line:72    COMMA: ,
In line:72    MINUS: -
In line:72    Lpar: (
In line:72    IDENT: e
In line:72    MINUS: -
In line:72    constch: '0'
In line:72    Rpar: )
In line:72    DIVIDE: /
In line:72    NUM: 3
In line:72    PLUS: +
In line:72    NUM: 0
In line:72    Rpar: )
In line:72    SEMICOLON: ;
In line:72    IDENT: loop
In line:72    LEQ: <=
In line:72    IDENT: sum
In line:72    Lpar: (
In line:72    NUM: 15
In line:72    PLUS: +
In line:72    Lpar: (
In line:72    IDENT: ch2
In line:72    Lspar: [
In line:72    NUM: 9
In line:72    Rspar: ]
In line:72    MINUS: -
In line:72    constch: 'a'
In line:72    Rpar: )
In line:72    TIMES: *
In line:72    NUM: 2
In line:72    COMMA: ,
In line:72    MINUS: -
In line:72    NUM: 3
In line:72    TIMES: *
In line:72    NUM: 5
In line:72    DIVIDE: /
In line:72    NUM: 7
In line:72    MINUS: -
In line:72    NUM: 17
In line:72    DIVIDE: /
In line:72    NUM: 2
In line:72    Rpar: )
In line:72    SEMICOLON: ;
In line:72    IDENT: loop
In line:72    GIVEN: =
In line:72    IDENT: loop
In line:72    PLUS: +
In line:72    NUM: 1
In line:72    Rpar: )
In line:73    Lbrac: {
In line:74    IDENT: s
In line:74    GIVEN: =
In line:74    IDENT: s
In line:74    PLUS: +
In line:74    IDENT: loop
In line:74    SEMICOLON: ;
In line:75    Rbrac: }
In line:76    symprintf: printf
In line:76    Lpar: (
In line:76    conststr: " "
In line:76    COMMA: ,
In line:76    IDENT: loop
In line:76    Rpar: )
In line:76    SEMICOLON: ;
In line:77    symreturn: return
In line:77    Lpar: (
In line:77    MINUS: -
In line:77    IDENT: t
In line:77    TIMES: *
In line:77    Lpar: (
In line:77    IDENT: r
In line:77    PLUS: +
In line:77    NUM: 31
In line:77    MINUS: -
In line:77    Lpar: (
In line:77    IDENT: e
In line:77    MINUS: -
In line:77    constch: '0'
In line:77    Rpar: )
In line:77    DIVIDE: /
In line:77    NUM: 3
In line:77    PLUS: +
In line:77    NUM: 0
In line:77    Rpar: )
In line:77    PLUS: +
In line:77    Lpar: (
In line:77    MINUS: -
In line:77    PLUS: +
In line:77    NUM: 11
In line:77    DIVIDE: /
In line:77    NUM: 5
In line:77    PLUS: +
In line:77    Lpar: (
In line:77    IDENT: ch2
In line:77    Lspar: [
In line:77    NUM: 9
In line:77    Rspar: ]
In line:77    MINUS: -
In line:77    constch: 'a'
In line:77    Rpar: )
In line:77    TIMES: *
In line:77    NUM: 2
In line:77    Rpar: )
In line:77    Rpar: )
In line:77    SEMICOLON: ;
In line:78    Rbrac: }
In line:79    symint: int
In line:79    IDENT: sq_dist
In line:79    Lpar: (
In line:79    symint: int
In line:79    IDENT: x1
In line:79    COMMA: ,
In line:79    symint: int
In line:79    IDENT: x2
In line:79    COMMA: ,
In line:79    symint: int
In line:79    IDENT: x3
In line:79    COMMA: ,
In line:79    symint: int
In line:79    IDENT: x4
In line:79    Rpar: )
In line:80    Lbrac: {
In line:81    symint: int
In line:81    IDENT: ret
In line:81    SEMICOLON: ;
In line:82    IDENT: ret
In line:82    GIVEN: =
In line:82    Lpar: (
In line:82    IDENT: x2
In line:82    MINUS: -
In line:82    IDENT: x1
In line:82    Rpar: )
In line:82    TIMES: *
In line:82    Lpar: (
In line:82    IDENT: x2
In line:82    MINUS: -
In line:82    IDENT: x1
In line:82    Rpar: )
In line:82    PLUS: +
In line:82    Lpar: (
In line:82    IDENT: x4
In line:82    MINUS: -
In line:82    IDENT: x3
In line:82    Rpar: )
In line:82    TIMES: *
In line:82    Lpar: (
In line:82    IDENT: x4
In line:82    MINUS: -
In line:82    IDENT: x3
In line:82    Rpar: )
In line:82    SEMICOLON: ;
In line:83    symreturn: return
In line:83    Lpar: (
In line:83    Lpar: (
In line:83    IDENT: ret
In line:83    PLUS: +
In line:83    NUM: 1
In line:83    Rpar: )
In line:83    TIMES: *
In line:83    NUM: 2
In line:83    DIVIDE: /
In line:83    NUM: 2
In line:83    MINUS: -
In line:83    NUM: 1
In line:83    Rpar: )
In line:83    SEMICOLON: ;
In line:84    Rbrac: }
In line:85    symint: int
In line:85    IDENT: fact
In line:85    Lpar: (
In line:85    symint: int
In line:85    IDENT: n
In line:85    Rpar: )
In line:86    Lbrac: {
In line:87    symif: if
In line:87    Lpar: (
In line:87    IDENT: n
In line:87    EQ: ==
In line:87    NUM: 1
In line:87    Rpar: )
In line:88    symreturn: return
In line:88    Lpar: (
In line:88    NUM: 1
In line:88    Rpar: )
In line:88    SEMICOLON: ;
In line:89    symreturn: return
In line:89    Lpar: (
In line:89    IDENT: n
In line:89    TIMES: *
In line:89    IDENT: fact
In line:89    Lpar: (
In line:89    IDENT: n
In line:89    MINUS: -
In line:89    NUM: 1
In line:89    Rpar: )
In line:89    Rpar: )
In line:89    SEMICOLON: ;
In line:90    Rbrac: }
In line:91    symint: int
In line:91    IDENT: reduce
In line:91    Lpar: (
In line:91    symint: int
In line:91    IDENT: n
In line:91    Rpar: )
In line:92    Lbrac: {
In line:93    symif: if
In line:93    Lpar: (
In line:93    IDENT: n
In line:93    EQ: ==
In line:93    NUM: 1
In line:93    Rpar: )
In line:94    symreturn: return
In line:94    Lpar: (
In line:94    NUM: 1
In line:94    Rpar: )
In line:94    SEMICOLON: ;
In line:95    symreturn: return
In line:95    Lpar: (
In line:95    IDENT: n
In line:95    PLUS: +
In line:95    IDENT: reduce
In line:95    Lpar: (
In line:95    IDENT: n
In line:95    MINUS: -
In line:95    NUM: 1
In line:95    Rpar: )
In line:95    Rpar: )
In line:95    SEMICOLON: ;
In line:96    Rbrac: }
In line:97    symint: int
In line:97    IDENT: reduce_to_m
In line:97    Lpar: (
In line:97    symint: int
In line:97    IDENT: n
In line:97    COMMA: ,
In line:97    symint: int
In line:97    IDENT: m
In line:97    Rpar: )
In line:98    Lbrac: {
In line:99    symint: int
In line:99    IDENT: r
In line:99    SEMICOLON: ;
In line:100    symfor: for
In line:100    Lpar: (
In line:100    IDENT: r
In line:100    GIVEN: =
In line:100    NUM: 0
In line:100    SEMICOLON: ;
In line:100    IDENT: n
In line:100    GEQ: >=
In line:100    IDENT: m
In line:100    SEMICOLON: ;
In line:100    IDENT: n
In line:100    GIVEN: =
In line:100    IDENT: n
In line:100    MINUS: -
In line:100    NUM: 1
In line:100    Rpar: )
In line:101    Lbrac: {
In line:102    IDENT: r
In line:102    GIVEN: =
In line:102    IDENT: r
In line:102    PLUS: +
In line:102    IDENT: n
In line:102    SEMICOLON: ;
In line:103    Rbrac: }
In line:104    symreturn: return
In line:104    Lpar: (
In line:104    IDENT: r
In line:104    Rpar: )
In line:104    SEMICOLON: ;
In line:105    Rbrac: }
In line:106    symchar: char
In line:106    IDENT: Lower
In line:106    Lpar: (
In line:106    symchar: char
In line:106    IDENT: ch
In line:106    Rpar: )
In line:107    Lbrac: {
In line:108    symreturn: return
In line:108    Lpar: (
In line:108    IDENT: ch
In line:108    PLUS: +
In line:108    NUM: 32
In line:108    Rpar: )
In line:108    SEMICOLON: ;
In line:109    Rbrac: }
In line:110    symvoid: void
In line:110    symmain: main
In line:110    Lpar: (
In line:110    Rpar: )
In line:110    Lbrac: {
In line:111    symconst: const
In line:111    symint: int
In line:111    IDENT: n
In line:111    GIVEN: =
In line:111    NUM: 81
In line:111    COMMA: ,
In line:111    IDENT: n1
In line:111    GIVEN: =
In line:111    MINUS: -
In line:111    NUM: 15
In line:111    COMMA: ,
In line:111    IDENT: n3
In line:111    GIVEN: =
In line:111    PLUS: +
In line:111    NUM: 13
In line:111    COMMA: ,
In line:111    IDENT: n4
In line:111    GIVEN: =
In line:111    NUM: 0
In line:111    COMMA: ,
In line:111    IDENT: n6
In line:111    GIVEN: =
In line:111    PLUS: +
In line:111    NUM: 0
In line:111    SEMICOLON: ;
In line:112    symconst: const
In line:112    symchar: char
In line:112    IDENT: q
In line:112    GIVEN: =
In line:112    constch: 'q'
In line:112    COMMA: ,
In line:112    IDENT: q2
In line:112    GIVEN: =
In line:112    constch: 's'
In line:112    COMMA: ,
In line:112    IDENT: q3
In line:112    GIVEN: =
In line:112    constch: '1'
In line:112    COMMA: ,
In line:112    IDENT: q4
In line:112    GIVEN: =
In line:112    constch: '+'
In line:112    SEMICOLON: ;
In line:113    symint: int
In line:113    IDENT: i
In line:113    COMMA: ,
In line:113    IDENT: k
In line:113    COMMA: ,
In line:113    IDENT: j
In line:113    COMMA: ,
In line:113    IDENT: arr
In line:113    Lspar: [
In line:113    NUM: 10
In line:113    Rspar: ]
In line:113    COMMA: ,
In line:113    IDENT: arr2
In line:113    Lspar: [
In line:113    NUM: 20
In line:113    Rspar: ]
In line:113    COMMA: ,
In line:113    IDENT: t
In line:113    SEMICOLON: ;
In line:114    symchar: char
In line:114    IDENT: s1
In line:114    COMMA: ,
In line:114    IDENT: s2
In line:114    Lspar: [
In line:114    NUM: 11
In line:114    Rspar: ]
In line:114    COMMA: ,
In line:114    IDENT: s3
In line:114    COMMA: ,
In line:114    IDENT: s5
In line:114    Lspar: [
In line:114    NUM: 26
In line:114    Rspar: ]
In line:114    COMMA: ,
In line:114    IDENT: s4
In line:114    SEMICOLON: ;
In line:116    symscanf: scanf
In line:116    Lpar: (
In line:116    IDENT: i
In line:116    COMMA: ,
In line:116    IDENT: s1
In line:116    Rpar: )
In line:116    SEMICOLON: ;
In line:117    symif: if
In line:117    Lpar: (
In line:117    IDENT: i
In line:117    LES: <
In line:117    NUM: 0
In line:117    Rpar: )
In line:118    Lbrac: {
In line:119    symprintf: printf
In line:119    Lpar: (
In line:119    conststr: "i shouldn't < 0!"
In line:119    Rpar: )
In line:119    SEMICOLON: ;
In line:120    symreturn: return
In line:120    SEMICOLON: ;
In line:121    Rbrac: }
In line:122    symif: if
In line:122    Lpar: (
In line:122    IDENT: i
In line:122    NEQ: !=
In line:122    NUM: 12
In line:122    DIVIDE: /
In line:122    NUM: 6
In line:122    TIMES: *
In line:122    NUM: 5
In line:122    PLUS: +
In line:122    NUM: 1
In line:122    MINUS: -
In line:122    NUM: 1
In line:122    Rpar: )
In line:123    Lbrac: {
In line:124    symprintf: printf
In line:124    Lpar: (
In line:124    conststr: "i should be 10, not "
In line:124    COMMA: ,
In line:124    IDENT: i
In line:124    Rpar: )
In line:124    SEMICOLON: ;
In line:125    symreturn: return
In line:125    SEMICOLON: ;
In line:126    Rbrac: }
In line:127    symelse: else
In line:128    SEMICOLON: ;
In line:129    symswitch: switch
In line:129    Lpar: (
In line:129    IDENT: s1
In line:129    Rpar: )
In line:130    Lbrac: {
In line:131    symcase: case
In line:131    constch: '2'
In line:131    COLON: :
In line:131    Lbrac: {
In line:131    IDENT: k
In line:131    GIVEN: =
In line:131    IDENT: fact
In line:131    Lpar: (
In line:131    Lpar: (
In line:131    IDENT: i
In line:131    PLUS: +
In line:131    NUM: 6
In line:131    Rpar: )
In line:131    DIVIDE: /
In line:131    NUM: 2
In line:131    Rpar: )
In line:131    SEMICOLON: ;
In line:131    symprintf: printf
In line:131    Lpar: (
In line:131    conststr: "In case 2: k="
In line:131    COMMA: ,
In line:131    IDENT: k
In line:131    Rpar: )
In line:131    SEMICOLON: ;
In line:131    Rbrac: }
In line:132    symcase: case
In line:132    constch: '3'
In line:132    COLON: :
In line:132    Lbrac: {
In line:133    IDENT: j
In line:133    GIVEN: =
In line:133    IDENT: reduce
In line:133    Lpar: (
In line:133    IDENT: MAX
In line:133    DIVIDE: /
In line:133    IDENT: i
In line:133    PLUS: +
In line:133    IDENT: s1
In line:133    MINUS: -
In line:133    constch: '0'
In line:133    Rpar: )
In line:133    SEMICOLON: ;
In line:134    symprintf: printf
In line:134    Lpar: (
In line:134    conststr: "In case 4: reduce(104)="
In line:134    COMMA: ,
In line:134    IDENT: j
In line:134    Rpar: )
In line:134    SEMICOLON: ;
In line:135    Rbrac: }
In line:136    symcase: case
In line:136    constch: '4'
In line:136    COLON: :
In line:136    Lbrac: {
In line:137    IDENT: k
In line:137    GIVEN: =
In line:137    Lpar: (
In line:137    IDENT: MAX
In line:137    PLUS: +
In line:137    IDENT: n
In line:137    PLUS: +
In line:137    IDENT: n1
In line:137    TIMES: *
In line:137    NUM: 5
In line:137    MINUS: -
In line:137    IDENT: n6
In line:137    PLUS: +
In line:137    IDENT: q2
In line:137    MINUS: -
In line:137    constch: 's'
In line:137    MINUS: -
In line:137    NUM: 6
In line:137    Rpar: )
In line:137    DIVIDE: /
In line:137    NUM: 10
In line:137    PLUS: +
In line:137    IDENT: q3
In line:137    MINUS: -
In line:137    constch: '1'
In line:137    SEMICOLON: ;
In line:138    symprintf: printf
In line:138    Lpar: (
In line:138    conststr: "In case 5: reduce_to_m(100,50)="
In line:138    COMMA: ,
In line:138    IDENT: reduce_to_m
In line:138    Lpar: (
In line:138    IDENT: k
In line:138    COMMA: ,
In line:138    NUM: 50
In line:138    Rpar: )
In line:138    Rpar: )
In line:138    SEMICOLON: ;
In line:139    Rbrac: }
In line:140    symcase: case
In line:140    constch: '5'
In line:140    COLON: :
In line:140    Lbrac: {
In line:141    symfor: for
In line:141    Lpar: (
In line:141    IDENT: s1
In line:141    GIVEN: =
In line:141    constch: 'A'
In line:141    SEMICOLON: ;
In line:141    IDENT: s1
In line:141    LEQ: <=
In line:141    constch: 'Z'
In line:141    SEMICOLON: ;
In line:141    IDENT: s1
In line:141    GIVEN: =
In line:141    IDENT: s1
In line:141    PLUS: +
In line:141    NUM: 1
In line:141    Rpar: )
In line:142    Lbrac: {
In line:143    IDENT: s5
In line:143    Lspar: [
In line:143    IDENT: s1
In line:143    MINUS: -
In line:143    constch: 'A'
In line:143    Rspar: ]
In line:143    GIVEN: =
In line:143    IDENT: Lower
In line:143    Lpar: (
In line:143    IDENT: s1
In line:143    Rpar: )
In line:143    SEMICOLON: ;
In line:144    symprintf: printf
In line:144    Lpar: (
In line:144    IDENT: s5
In line:144    Lspar: [
In line:144    IDENT: s1
In line:144    MINUS: -
In line:144    constch: 'A'
In line:144    Rspar: ]
In line:144    Rpar: )
In line:144    SEMICOLON: ;
In line:145    Rbrac: }
In line:146    symprintf: printf
In line:146    Lpar: (
In line:146    IDENT: s5
In line:146    Rpar: )
In line:146    SEMICOLON: ;
In line:147    Rbrac: }
In line:148    symcase: case
In line:148    constch: '6'
In line:148    COLON: :
In line:148    Lbrac: {
In line:149    IDENT: testDeclare
In line:149    Lpar: (
In line:149    Rpar: )
In line:149    SEMICOLON: ;
In line:150    symprintf: printf
In line:150    Lpar: (
In line:150    conststr: "   "
In line:150    Rpar: )
In line:150    SEMICOLON: ;
In line:151    IDENT: testForAndArray
In line:151    Lpar: (
In line:151    Rpar: )
In line:151    SEMICOLON: ;
In line:152    Rbrac: }
In line:153    symcase: case
In line:153    constch: '7'
In line:153    COLON: :
In line:153    Lbrac: {
In line:154    IDENT: k
In line:154    GIVEN: =
In line:154    IDENT: testExpression
In line:154    Lpar: (
In line:154    Rpar: )
In line:154    SEMICOLON: ;
In line:155    symprintf: printf
In line:155    Lpar: (
In line:155    conststr: "result: "
In line:155    COMMA: ,
In line:155    IDENT: k
In line:155    Rpar: )
In line:155    SEMICOLON: ;
In line:155    Rbrac: }
In line:156    symdefault: default
In line:156    COLON: :
In line:156    Lbrac: {
In line:157    symprintf: printf
In line:157    Lpar: (
In line:157    conststr: "default:"
In line:157    COMMA: ,
In line:157    IDENT: sq_dist
In line:157    Lpar: (
In line:157    IDENT: i
In line:157    COMMA: ,
In line:157    IDENT: n
In line:157    COMMA: ,
In line:157    IDENT: n1
In line:157    COMMA: ,
In line:157    IDENT: n3
In line:157    Rpar: )
In line:157    Rpar: )
In line:157    SEMICOLON: ;
In line:158    Rbrac: }
In line:159    Rbrac: }
In line:160    symreturn: return
In line:160    SEMICOLON: ;
In line:161    Rbrac: }
In line:-1    END: 
