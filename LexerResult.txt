In line:1    symconst: const
In line:1    symint: int
In line:1    IDENT: MAX
In line:1    GIVEN: =
In line:1    NUM: 1000
In line:1    SEMICOLON: ;
In line:2    symconst: const
In line:2    symchar: char
In line:2    IDENT: qop
In line:2    GIVEN: =
In line:2    constch: 'r'
In line:2    COMMA: ,
In line:2    IDENT: name
In line:2    GIVEN: =
In line:2    constch: '5'
In line:2    SEMICOLON: ;
In line:3    symconst: const
In line:3    symint: int
In line:3    IDENT: index2a01
In line:3    GIVEN: =
In line:3    NUM: 15
In line:3    COMMA: ,
In line:3    IDENT: i1a
In line:3    GIVEN: =
In line:3    NUM: 0
In line:3    COMMA: ,
In line:3    IDENT: p
In line:3    GIVEN: =
In line:3    NUM: 0
In line:3    SEMICOLON: ;
In line:4    symconst: const
In line:4    symchar: char
In line:4    IDENT: c
In line:4    GIVEN: =
In line:4    constch: '*'
In line:4    SEMICOLON: ;
In line:5    symchar: char
In line:5    IDENT: x
In line:5    COMMA: ,
In line:5    IDENT: a5
In line:5    SEMICOLON: ;
In line:6    symchar: char
In line:6    IDENT: _s
In line:6    SEMICOLON: ;
In line:7    symint: int
In line:7    IDENT: i
In line:7    COMMA: ,
In line:7    IDENT: aaw5
In line:7    COMMA: ,
In line:7    IDENT: _errIndex
In line:7    SEMICOLON: ;
In line:8    symint: int
In line:8    IDENT: hea125
In line:8    SEMICOLON: ;
In line:9    symchar: char
In line:9    IDENT: arr
In line:9    Lspar: [
In line:9    NUM: 101
In line:9    Rspar: ]
In line:9    COMMA: ,
In line:9    IDENT: arr2
In line:9    COMMA: ,
In line:9    IDENT: arr3
In line:9    Lspar: [
In line:9    NUM: 255
In line:9    Rspar: ]
In line:9    SEMICOLON: ;
In line:10    symint: int
In line:10    IDENT: qw
In line:10    Lspar: [
In line:10    NUM: 102
In line:10    Rspar: ]
In line:10    COMMA: ,
In line:10    IDENT: qw2
In line:10    Lspar: [
In line:10    NUM: 17
In line:10    Rspar: ]
In line:10    COMMA: ,
In line:10    IDENT: qw3
In line:10    SEMICOLON: ;
In line:11    symint: int
In line:11    IDENT: sq_dist
In line:11    Lpar: (
In line:11    symint: int
In line:11    IDENT: x1
In line:11    COMMA: ,
In line:11    symint: int
In line:11    IDENT: x2
In line:11    COMMA: ,
In line:11    symint: int
In line:11    IDENT: x3
In line:11    COMMA: ,
In line:11    symint: int
In line:11    IDENT: x4
In line:11    Rpar: )
In line:12    Lbrac: {
In line:13    symint: int
In line:13    IDENT: ret
In line:13    SEMICOLON: ;
In line:14    IDENT: ret
In line:14    GIVEN: =
In line:14    Lpar: (
In line:14    IDENT: x2
In line:14    MINUS: -
In line:14    IDENT: x1
In line:14    Rpar: )
In line:14    TIMES: *
In line:14    Lpar: (
In line:14    IDENT: x2
In line:14    MINUS: -
In line:14    IDENT: x1
In line:14    Rpar: )
In line:14    PLUS: +
In line:14    Lpar: (
In line:14    IDENT: x4
In line:14    MINUS: -
In line:14    IDENT: x3
In line:14    Rpar: )
In line:14    TIMES: *
In line:14    Lpar: (
In line:14    IDENT: x4
In line:14    MINUS: -
In line:14    IDENT: x3
In line:14    Rpar: )
In line:14    SEMICOLON: ;
In line:15    symreturn: return
In line:15    Lpar: (
In line:15    Lpar: (
In line:15    IDENT: ret
In line:15    PLUS: +
In line:15    NUM: 1
In line:15    Rpar: )
In line:15    TIMES: *
In line:15    NUM: 2
In line:15    DIVIDE: /
In line:15    NUM: 2
In line:15    MINUS: -
In line:15    NUM: 1
In line:15    Rpar: )
In line:15    SEMICOLON: ;
In line:16    Rbrac: }
In line:17    symint: int
In line:17    IDENT: fact
In line:17    Lpar: (
In line:17    symint: int
In line:17    IDENT: n
In line:17    Rpar: )
In line:18    Lbrac: {
In line:19    symif: if
In line:19    Lpar: (
In line:19    IDENT: n
In line:19    EQ: ==
In line:19    NUM: 1
In line:19    Rpar: )
In line:20    symreturn: return
In line:20    Lpar: (
In line:20    NUM: 1
In line:20    Rpar: )
In line:20    SEMICOLON: ;
In line:21    symreturn: return
In line:21    Lpar: (
In line:21    IDENT: n
In line:21    TIMES: *
In line:21    IDENT: fact
In line:21    Lpar: (
In line:21    IDENT: n
In line:21    MINUS: -
In line:21    NUM: 1
In line:21    Rpar: )
In line:21    Rpar: )
In line:21    SEMICOLON: ;
In line:22    Rbrac: }
In line:23    symint: int
In line:23    IDENT: reduce
In line:23    Lpar: (
In line:23    symint: int
In line:23    IDENT: n
In line:23    Rpar: )
In line:24    Lbrac: {
In line:25    symif: if
In line:25    Lpar: (
In line:25    IDENT: n
In line:25    EQ: ==
In line:25    NUM: 1
In line:25    Rpar: )
In line:26    symreturn: return
In line:26    Lpar: (
In line:26    NUM: 1
In line:26    Rpar: )
In line:26    SEMICOLON: ;
In line:27    symreturn: return
In line:27    Lpar: (
In line:27    IDENT: n
In line:27    PLUS: +
In line:27    IDENT: reduce
In line:27    Lpar: (
In line:27    IDENT: n
In line:27    MINUS: -
In line:27    NUM: 1
In line:27    Rpar: )
In line:27    Rpar: )
In line:27    SEMICOLON: ;
In line:28    Rbrac: }
In line:29    symint: int
In line:29    IDENT: reduce_to_m
In line:29    Lpar: (
In line:29    symint: int
In line:29    IDENT: n
In line:29    COMMA: ,
In line:29    symint: int
In line:29    IDENT: m
In line:29    Rpar: )
In line:30    Lbrac: {
In line:31    symint: int
In line:31    IDENT: r
In line:31    SEMICOLON: ;
In line:32    symfor: for
In line:32    Lpar: (
In line:32    IDENT: r
In line:32    GIVEN: =
In line:32    NUM: 0
In line:32    SEMICOLON: ;
In line:32    IDENT: n
In line:32    GEQ: >=
In line:32    IDENT: m
In line:32    SEMICOLON: ;
In line:32    IDENT: n
In line:32    GIVEN: =
In line:32    IDENT: n
In line:32    MINUS: -
In line:32    NUM: 1
In line:32    Rpar: )
In line:33    Lbrac: {
In line:34    IDENT: r
In line:34    GIVEN: =
In line:34    IDENT: r
In line:34    PLUS: +
In line:34    IDENT: n
In line:34    SEMICOLON: ;
In line:35    Rbrac: }
In line:36    symreturn: return
In line:36    Lpar: (
In line:36    IDENT: r
In line:36    Rpar: )
In line:36    SEMICOLON: ;
In line:37    Rbrac: }
In line:38    symvoid: void
In line:38    IDENT: test_print
In line:38    Lpar: (
In line:38    Rpar: )
In line:39    Lbrac: {
In line:40    symprintf: printf
In line:40    Lpar: (
In line:40    conststr: "hello world"
In line:40    COMMA: ,
In line:40    constch: 'a'
In line:40    PLUS: +
In line:40    NUM: 2
In line:40    TIMES: *
In line:40    NUM: 9
In line:40    DIVIDE: /
In line:40    NUM: 2
In line:40    Rpar: )
In line:40    SEMICOLON: ;
In line:41    symprintf: printf
In line:41    Lpar: (
In line:41    conststr: "got a k/--!"
In line:41    Rpar: )
In line:41    SEMICOLON: ;
In line:42    symprintf: printf
In line:42    Lpar: (
In line:42    IDENT: index2a01
In line:42    TIMES: *
In line:42    NUM: 2
In line:42    DIVIDE: /
In line:42    NUM: 6
In line:42    PLUS: +
In line:42    NUM: 13
In line:42    Rpar: )
In line:42    SEMICOLON: ;
In line:43    Rbrac: }
In line:44    symchar: char
In line:44    IDENT: Lower
In line:44    Lpar: (
In line:44    symchar: char
In line:44    IDENT: ch
In line:44    Rpar: )
In line:45    Lbrac: {
In line:46    symreturn: return
In line:46    Lpar: (
In line:46    IDENT: ch
In line:46    PLUS: +
In line:46    NUM: 32
In line:46    Rpar: )
In line:46    SEMICOLON: ;
In line:47    Rbrac: }
In line:48    symvoid: void
In line:48    symmain: main
In line:48    Lpar: (
In line:48    Rpar: )
In line:48    Lbrac: {
In line:49    symconst: const
In line:49    symint: int
In line:49    IDENT: n
In line:49    GIVEN: =
In line:49    NUM: 81
In line:49    COMMA: ,
In line:49    IDENT: n1
In line:49    GIVEN: =
In line:49    MINUS: -
In line:49    NUM: 15
In line:49    COMMA: ,
In line:49    IDENT: n3
In line:49    GIVEN: =
In line:49    PLUS: +
In line:49    NUM: 13
In line:49    COMMA: ,
In line:49    IDENT: n4
In line:49    GIVEN: =
In line:49    NUM: 0
In line:49    COMMA: ,
In line:49    IDENT: n6
In line:49    GIVEN: =
In line:49    PLUS: +
In line:49    NUM: 0
In line:49    SEMICOLON: ;
In line:50    symconst: const
In line:50    symchar: char
In line:50    IDENT: q
In line:50    GIVEN: =
In line:50    constch: 'q'
In line:50    COMMA: ,
In line:50    IDENT: q2
In line:50    GIVEN: =
In line:50    constch: 's'
In line:50    COMMA: ,
In line:50    IDENT: q3
In line:50    GIVEN: =
In line:50    constch: '1'
In line:50    COMMA: ,
In line:50    IDENT: q4
In line:50    GIVEN: =
In line:50    constch: '+'
In line:50    SEMICOLON: ;
In line:51    symint: int
In line:51    IDENT: i
In line:51    COMMA: ,
In line:51    IDENT: k
In line:51    COMMA: ,
In line:51    IDENT: j
In line:51    COMMA: ,
In line:51    IDENT: arr
In line:51    Lspar: [
In line:51    NUM: 10
In line:51    Rspar: ]
In line:51    COMMA: ,
In line:51    IDENT: arr2
In line:51    Lspar: [
In line:51    NUM: 20
In line:51    Rspar: ]
In line:51    COMMA: ,
In line:51    IDENT: t
In line:51    SEMICOLON: ;
In line:52    symchar: char
In line:52    IDENT: s1
In line:52    COMMA: ,
In line:52    IDENT: s2
In line:52    Lspar: [
In line:52    NUM: 11
In line:52    Rspar: ]
In line:52    COMMA: ,
In line:52    IDENT: s3
In line:52    COMMA: ,
In line:52    IDENT: s5
In line:52    Lspar: [
In line:52    NUM: 26
In line:52    Rspar: ]
In line:52    COMMA: ,
In line:52    IDENT: s4
In line:52    SEMICOLON: ;
In line:54    symscanf: scanf
In line:54    Lpar: (
In line:54    IDENT: i
In line:54    COMMA: ,
In line:54    IDENT: s1
In line:54    Rpar: )
In line:54    SEMICOLON: ;
In line:55    symif: if
In line:55    Lpar: (
In line:55    IDENT: i
In line:55    LES: <
In line:55    NUM: 0
In line:55    Rpar: )
In line:56    Lbrac: {
In line:57    symprintf: printf
In line:57    Lpar: (
In line:57    conststr: "i shouldn't < 0!"
In line:57    Rpar: )
In line:57    SEMICOLON: ;
In line:58    symreturn: return
In line:58    SEMICOLON: ;
In line:59    Rbrac: }
In line:60    symif: if
In line:60    Lpar: (
In line:60    IDENT: i
In line:60    NEQ: !=
In line:60    NUM: 12
In line:60    DIVIDE: /
In line:60    NUM: 6
In line:60    TIMES: *
In line:60    NUM: 5
In line:60    PLUS: +
In line:60    NUM: 1
In line:60    MINUS: -
In line:60    NUM: 1
In line:60    Rpar: )
In line:61    Lbrac: {
In line:62    symprintf: printf
In line:62    Lpar: (
In line:62    conststr: "i should be 10, not "
In line:62    COMMA: ,
In line:62    IDENT: i
In line:62    Rpar: )
In line:62    SEMICOLON: ;
In line:63    symreturn: return
In line:63    SEMICOLON: ;
In line:64    Rbrac: }
In line:65    symelse: else
In line:66    SEMICOLON: ;
In line:67    symswitch: switch
In line:67    Lpar: (
In line:67    IDENT: s1
In line:67    Rpar: )
In line:68    Lbrac: {
In line:69    symcase: case
In line:69    constch: '1'
In line:69    COLON: :
In line:69    IDENT: test_print
In line:69    Lpar: (
In line:69    Rpar: )
In line:69    SEMICOLON: ;
In line:70    symcase: case
In line:70    constch: '2'
In line:70    COLON: :
In line:70    Lbrac: {
In line:70    IDENT: k
In line:70    GIVEN: =
In line:70    IDENT: fact
In line:70    Lpar: (
In line:70    IDENT: i
In line:70    DIVIDE: /
In line:70    NUM: 2
In line:70    Rpar: )
In line:70    SEMICOLON: ;
In line:70    symprintf: printf
In line:70    Lpar: (
In line:70    conststr: "In case 2: k="
In line:70    COMMA: ,
In line:70    IDENT: k
In line:70    Rpar: )
In line:70    SEMICOLON: ;
In line:70    Rbrac: }
In line:71    symcase: case
In line:71    constch: '3'
In line:71    COLON: :
In line:71    Lbrac: {
In line:72    symfor: for
In line:72    Lpar: (
In line:72    IDENT: j
In line:72    GIVEN: =
In line:72    NUM: 0
In line:72    SEMICOLON: ;
In line:72    IDENT: j
In line:72    LES: <
In line:72    NUM: 10
In line:72    SEMICOLON: ;
In line:72    IDENT: j
In line:72    GIVEN: =
In line:72    IDENT: j
In line:72    PLUS: +
In line:72    NUM: 1
In line:72    Rpar: )
In line:73    IDENT: arr
In line:73    Lspar: [
In line:73    IDENT: j
In line:73    Rspar: ]
In line:73    GIVEN: =
In line:73    IDENT: n3
In line:73    PLUS: +
In line:73    IDENT: j
In line:73    SEMICOLON: ;
In line:74    IDENT: k
In line:74    GIVEN: =
In line:74    IDENT: i
In line:74    TIMES: *
In line:74    Lpar: (
In line:74    IDENT: n
In line:74    PLUS: +
In line:74    MINUS: -
In line:74    NUM: 5
In line:74    MINUS: -
In line:74    MINUS: -
In line:74    NUM: 7
In line:74    PLUS: +
In line:74    NUM: 2
In line:74    Rpar: )
In line:74    DIVIDE: /
In line:74    Lpar: (
In line:74    IDENT: arr
In line:74    Lspar: [
In line:74    NUM: 1
In line:74    Rspar: ]
In line:74    MINUS: -
In line:74    NUM: 4
In line:74    Rpar: )
In line:74    SEMICOLON: ;
In line:75    symprintf: printf
In line:75    Lpar: (
In line:75    conststr: "In case 3: k="
In line:75    COMMA: ,
In line:75    IDENT: k
In line:75    Rpar: )
In line:75    SEMICOLON: ;
In line:76    Rbrac: }
In line:77    symcase: case
In line:77    constch: '4'
In line:77    COLON: :
In line:77    Lbrac: {
In line:78    IDENT: j
In line:78    GIVEN: =
In line:78    IDENT: reduce
In line:78    Lpar: (
In line:78    IDENT: MAX
In line:78    DIVIDE: /
In line:78    IDENT: i
In line:78    PLUS: +
In line:78    IDENT: s1
In line:78    MINUS: -
In line:78    constch: '0'
In line:78    Rpar: )
In line:78    SEMICOLON: ;
In line:79    symprintf: printf
In line:79    Lpar: (
In line:79    conststr: "In case 4: reduce(104)="
In line:79    COMMA: ,
In line:79    IDENT: j
In line:79    Rpar: )
In line:79    SEMICOLON: ;
In line:80    Rbrac: }
In line:81    symcase: case
In line:81    constch: '5'
In line:81    COLON: :
In line:81    Lbrac: {
In line:82    IDENT: k
In line:82    GIVEN: =
In line:82    Lpar: (
In line:82    IDENT: MAX
In line:82    PLUS: +
In line:82    IDENT: n
In line:82    PLUS: +
In line:82    IDENT: n1
In line:82    TIMES: *
In line:82    NUM: 5
In line:82    MINUS: -
In line:82    IDENT: n6
In line:82    PLUS: +
In line:82    IDENT: q2
In line:82    MINUS: -
In line:82    constch: 's'
In line:82    MINUS: -
In line:82    NUM: 6
In line:82    Rpar: )
In line:82    DIVIDE: /
In line:82    NUM: 10
In line:82    PLUS: +
In line:82    IDENT: q3
In line:82    MINUS: -
In line:82    constch: '1'
In line:82    SEMICOLON: ;
In line:83    symprintf: printf
In line:83    Lpar: (
In line:83    conststr: "In case 5: reduce_to_m(100,50)="
In line:83    COMMA: ,
In line:83    IDENT: reduce_to_m
In line:83    Lpar: (
In line:83    IDENT: k
In line:83    COMMA: ,
In line:83    NUM: 50
In line:83    Rpar: )
In line:83    Rpar: )
In line:83    SEMICOLON: ;
In line:84    Rbrac: }
In line:85    symcase: case
In line:85    constch: '6'
In line:85    COLON: :
In line:85    Lbrac: {
In line:86    symfor: for
In line:86    Lpar: (
In line:86    IDENT: s1
In line:86    GIVEN: =
In line:86    constch: 'A'
In line:86    SEMICOLON: ;
In line:86    IDENT: s1
In line:86    LEQ: <=
In line:86    constch: 'Z'
In line:86    SEMICOLON: ;
In line:86    IDENT: s1
In line:86    GIVEN: =
In line:86    IDENT: s1
In line:86    PLUS: +
In line:86    NUM: 1
In line:86    Rpar: )
In line:87    IDENT: s5
In line:87    Lspar: [
In line:87    IDENT: s1
In line:87    MINUS: -
In line:87    constch: 'A'
In line:87    Rspar: ]
In line:87    GIVEN: =
In line:87    IDENT: Lower
In line:87    Lpar: (
In line:87    IDENT: s1
In line:87    Rpar: )
In line:87    SEMICOLON: ;
In line:88    symprintf: printf
In line:88    Lpar: (
In line:88    IDENT: s5
In line:88    Rpar: )
In line:88    SEMICOLON: ;
In line:89    Rbrac: }
In line:90    symdefault: default
In line:90    COLON: :
In line:90    Lbrac: {
In line:91    symfor: for
In line:91    Lpar: (
In line:91    IDENT: k
In line:91    GIVEN: =
In line:91    NUM: 0
In line:91    SEMICOLON: ;
In line:91    IDENT: k
In line:91    LES: <
In line:91    NUM: 0
In line:91    SEMICOLON: ;
In line:91    IDENT: k
In line:91    GIVEN: =
In line:91    IDENT: k
In line:91    PLUS: +
In line:91    NUM: 1
In line:91    Rpar: )
In line:92    symprintf: printf
In line:92    Lpar: (
In line:92    conststr: "default:"
In line:92    COMMA: ,
In line:92    IDENT: sq_dist
In line:92    Lpar: (
In line:92    IDENT: i
In line:92    COMMA: ,
In line:92    IDENT: n
In line:92    COMMA: ,
In line:92    IDENT: n1
In line:92    COMMA: ,
In line:92    IDENT: n3
In line:92    Rpar: )
In line:92    Rpar: )
In line:92    SEMICOLON: ;
In line:93    Rbrac: }
In line:94    Rbrac: }
In line:95    symreturn: return
In line:95    SEMICOLON: ;
In line:96    Rbrac: }
In line:-1    END: 
